version: '2.27'

services:
  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/cache:/nginx/cache
    restart: always
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
      - client

  db:
    image: postgres:latest
    container_name: "postgres_db"
    volumes:
      - db_data:/var/lib/postgresql/data
      - db_backups:/backups
    restart: always
    labels:
      - "author=${AUTHOR}"
      - "project=${SLUG}"
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata/
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"

  api:
    build:
      context: ./server
      dockerfile: Dockerfile.prod
      args:
        - ASPNETCORE_ENVIRONMENT=Production
    container_name: "dotnet_api"
    volumes:
      - ./server/:/app
    restart: always
    labels:
      - "author=${AUTHOR}"
      - "project=${SLUG}"
    ports:
      - "8080:8080"
    depends_on:
      - db
    environment:
      BASE_URL: "${BASE_URL}"
      DB_CONNECTION: "Host=db;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Database=${POSTGRES_DB};"

  client:
    build:
      context: ./client
      dockerfile: Dockerfile.prod
      args:
        - NODE_ENV=production
        - API_ADDRESS=${PROD_API_ADDRESS}
        - INTERNAL_API_ADDRESS=${PROD_INTERNAL_API_ADDRESS}
    container_name: "nuxt_client"
    volumes:
      - ./client/:/App
    restart: always
    labels:
      - "author=${AUTHOR}"
      - "project=${SLUG}"
    ports:
      - "3000:3000"
      - "24678:24678"
      - "4000:4000"
    depends_on:
      - api

  backup:
    image: alpine
    container_name: "db_backup"
    volumes:
      - ./backup.sh/:/backup.sh
      - db_backups:/backups
    restart: always
    labels:
      - "author=${AUTHOR}"
      - "project=${SLUG}"
    entrypoint: "/bin/sh"
    command: "-c 'echo \"0 2 * * * /bin/sh /backup.sh\" | crontab - && crond -f -d 8'"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    depends_on:
      - db

volumes:
  db_data:
  db_backups:
